{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["marked","setOptions","breaks","highlight","code","Prism","languages","javascript","renderer","Renderer","link","href","title","text","App","props","state","markdown","placeholder","handleChange","bind","event","this","setState","target","value","id","class","onChange","React","Component","Editor","type","Preview","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAIAA,IAAOC,WAAW,CAChBC,QAAQ,EACRC,UAAW,SAAUC,GACnB,OAAOC,IAAMF,UAAUC,EAAMC,IAAMC,UAAUC,WAAY,iBAI7D,IAAMC,EAAW,IAAIR,IAAOS,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAM,4BAAN,OAAmCF,EAAnC,aAA4CE,EAA5C,S,IAGIC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAUC,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,gDAOnB,SAAaC,GACXC,KAAKC,SAAS,CACZN,SAAUI,EAAMG,OAAOC,U,oBAG1B,WACE,OACE,gCACE,sBAAKC,GAAG,QAAR,UACE,oBAAIC,MAAM,QAAV,qBACA,cAAC,EAAD,CAAQV,SAAUK,KAAKN,MAAMC,SAAUW,SAAUN,KAAKH,kBAExD,sBAAKO,GAAG,SAAR,UACE,oBAAIC,MAAM,QAAV,sBACA,cAAC,EAAD,CAASV,SAAUK,KAAKN,MAAMC,qB,GAtBvBY,IAAMC,WA6BlBC,EAAS,SAAAhB,GACb,OACE,0BAAUW,GAAG,SACXE,SAAUb,EAAMa,SAChBI,KAAK,OACLP,MAAOV,EAAME,YAKbgB,EAAU,SAAAlB,GACd,OACE,qBAAKW,GAAG,UACNQ,wBAAyB,CACvBC,OAAQnC,IAAOe,EAAME,SAAU,CAAET,SAAUA,QAM7CU,EAAW,yrBAiCFJ,ICtFAsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98570790.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport marked from 'marked';\nimport Prism from 'prismjs';\n\nmarked.setOptions({\n  breaks: true,\n  highlight: function (code) {\n    return Prism.highlight(code, Prism.languages.javascript, 'javascript');\n  }\n});\n\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      markdown: event.target.value\n    });\n  }\n   render() {\n     return (\n       <div>\n         <div id=\"input\">\n           <h3 class=\"title\">Editor:</h3>\n           <Editor markdown={this.state.markdown} onChange={this.handleChange} />\n         </div>\n         <div id=\"output\">\n           <h3 class=\"title\">Preview:</h3>\n           <Preview markdown={this.state.markdown} />\n         </div>\n       </div>\n     );\n   }\n}\n\nconst Editor = props => {\n  return (\n    <textarea id=\"editor\"\n      onChange={props.onChange}\n      type=\"text\"\n      value={props.markdown}\n     />\n  );\n}\n\nconst Preview = props => {\n  return (\n    <div id=\"preview\"\n      dangerouslySetInnerHTML={{\n        __html: marked(props.markdown, { renderer: renderer })\n      }}\n     />\n  );\n}\n\nconst placeholder = `# Welcome to the Markdown Previewer App!\n## It's made for redering your markdown\nWrite GitHub Flavored Markdown in the editor and you'll see the result in the Preview field.\n\nYou can use **bold** text.\n\nNot to mention code: \\`const NUMBER = 8\\`\n\nAnd code block:\n\\`\\`\\`\nfunction beHappy(you) {\n  if (you.happiness === false) {\n    you.happiness = true;\n  }\n  return you.happiness;\n}\n\\`\\`\\`\n\nThis is a [link](https://trollmannen8.github.io/).\n\nHere's an image:\n![image](https://trollmannen8.github.io/assets/img/about.webp \"Coffee\")\n\nAnd a list:\n- One\n- Two\n- Three\n\nAnd finally a blockquote:\n> “Life is really simple, but social media has made it complicated.”\n`;\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}